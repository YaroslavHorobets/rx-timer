{"version":3,"sources":["Timer/Timer.js","App.js","index.js"],"names":["Timer","props","useState","hours","setHours","minutes","setMinutes","seconds","setSeconds","useEffect","Math","floor","timePassed","toString","length","onClick","onStart","className","onWait","onReset","App","timer","setTimer","diff","setDiff","subscription","setSubscription","prevent","setPrevent","unsubscribe","timerSubscription","interval","pipe","map","val","subscribe","event","timerInstance","setTimeout","clearTimeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAsCeA,EApCD,SAACC,GAAW,IAAD,EACGC,mBAAS,GADZ,mBAChBC,EADgB,KACTC,EADS,OAEOF,mBAAS,GAFhB,mBAEhBG,EAFgB,KAEPC,EAFO,OAGOJ,mBAAS,GAHhB,mBAGhBK,EAHgB,KAGPC,EAHO,KAgBvB,OAXAC,qBAAU,WACR,IAAIN,EAAQO,KAAKC,MAAMV,EAAMW,WAAa,MAC1CR,GAAS,kBAAmC,IAA5BD,EAAMU,WAAWC,OAAe,IAAM,IAAMX,KAE5D,IAAIE,EAAUK,KAAKC,MAAOV,EAAMW,WAAa,KAAQ,IACrDN,GAAW,kBAAqC,IAA9BD,EAAQQ,WAAWC,OAAe,IAAM,IAAMT,KAEhE,IAAIE,EAAUN,EAAMW,WAAa,GACjCJ,GAAW,kBAAqC,IAA9BD,EAAQM,WAAWC,OAAe,IAAM,IAAMP,OAC/D,CAACN,EAAMW,aAGR,qCACE,+BACGT,EADH,IACWE,EADX,IACqBE,KAErB,gCACE,wBAAQQ,QAASd,EAAMe,QAASC,UAAU,YAA1C,wBAGA,wBAAQF,QAASd,EAAMiB,OAAQD,UAAU,YAAzC,kBAGA,wBAAQF,QAASd,EAAMkB,QAASF,UAAU,YAA1C,0B,sBCqCOG,MA7Df,WAAgB,IAAD,EACalB,mBAAS,GADtB,mBACNmB,EADM,KACCC,EADD,OAEWpB,mBAAS,GAFpB,mBAENqB,EAFM,KAEAC,EAFA,OAG2BtB,mBAAS,IAHpC,mBAGNuB,EAHM,KAGQC,EAHR,OAIiBxB,oBAAS,GAJ1B,mBAINyB,EAJM,KAIGC,EAJH,KA+Cb,OACE,qBAAKX,UAAU,MAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,cAAC,EAAD,CACEL,WAAYS,GAAgBE,EAC5BP,QA9Ce,WACrB,GAAKS,EAQHA,EAAaI,cACbP,EAAS,GACTE,EAAQ,GACRE,EAAgB,QAXC,CACjB,IAAMI,EAAoBC,YAAS,KAChCC,KAAKC,aAAI,SAACC,GAAD,OAASA,EAAM,MACxBC,WAAU,SAACD,GACVZ,EAASY,EAAMX,MAEnBG,EAAgBI,KAwCZZ,OAhCc,SAACkB,GACrB,GAAIT,EAAS,CACXC,GAAW,GACX,IAAMS,EAAgBC,YAAW,WAC/BV,GAAW,GACXW,aAAaF,KACZ,UAECZ,GACFA,EAAaI,cAEfL,EAAQH,GACRK,EAAgB,KAqBZP,QAjBe,WACjBM,GACFA,EAAaI,cAEf,IAAMC,EAAoBC,YAAS,KAAMI,WAAU,SAACD,GAClDZ,EAASY,MAEXR,EAAgBI,WC7CpBU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e03e45cf.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst Timer = (props) => {\n  const [hours, setHours] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    let hours = Math.floor(props.timePassed / 3600);\n    setHours(() => (hours.toString().length === 1 ? \"0\" : \"\") + hours);\n\n    let minutes = Math.floor((props.timePassed % 3600) / 60);\n    setMinutes(() => (minutes.toString().length === 1 ? \"0\" : \"\") + minutes);\n\n    let seconds = props.timePassed % 60;\n    setSeconds(() => (seconds.toString().length === 1 ? \"0\" : \"\") + seconds);\n  }, [props.timePassed]);\n\n  return (\n    <>\n      <h2>\n        {hours}:{minutes}:{seconds}\n      </h2>\n      <div>\n        <button onClick={props.onStart} className=\"timer-btn\">\n          Start/Stop\n        </button>\n        <button onClick={props.onWait} className=\"timer-btn\">\n          Wait\n        </button>\n        <button onClick={props.onReset} className=\"timer-btn\">\n          Reset\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default Timer;\n","import { useState } from \"react\";\nimport Timer from \"./Timer/Timer\";\nimport { interval } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport \"./App.css\";\n\nfunction App() {\n  const [timer, setTimer] = useState(0);\n  const [diff, setDiff] = useState(0);\n  const [subscription, setSubscription] = useState(\"\");\n  const [prevent, setPrevent] = useState(true);\n\n  const onStartHandler = () => {\n    if (!subscription) {\n      const timerSubscription = interval(1000)\n        .pipe(map((val) => val + 1))\n        .subscribe((val) => {\n          setTimer(val + diff);\n        });\n      setSubscription(timerSubscription);\n    } else {\n      subscription.unsubscribe();\n      setTimer(0);\n      setDiff(0);\n      setSubscription(\"\");\n    }\n  };\n  const onWaitHandler = (event) => {\n    if (prevent) {\n      setPrevent(false);\n      const timerInstance = setTimeout(function () {\n        setPrevent(true);\n        clearTimeout(timerInstance);\n      }, 300);\n    } else {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n      setDiff(timer);\n      setSubscription(\"\");\n    }\n  };\n\n  const onResetHandler = () => {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n    const timerSubscription = interval(1000).subscribe((val) => {\n      setTimer(val);\n    });\n    setSubscription(timerSubscription);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"timer-wrapper\">\n        <Timer\n          timePassed={timer ? timer : diff}\n          onStart={onStartHandler}\n          onWait={onWaitHandler}\n          onReset={onResetHandler}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}